[{"/home/ubuntu/fullstackopen/part2/src/index.js":"1","/home/ubuntu/fullstackopen/part2/src/ex/ex2_20.js":"2","/home/ubuntu/fullstackopen/part2/src/ex/ex2_16_module.js":"3"},{"size":257,"mtime":1611120535232,"results":"4","hashOfConfig":"5"},{"size":4356,"mtime":1611120535232,"results":"6","hashOfConfig":"5"},{"size":893,"mtime":1611122009063,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"10"},"nan5xr",{"filePath":"11","messages":"12","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"13","usedDeprecatedRules":"10"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/home/ubuntu/fullstackopen/part2/src/index.js",[],["16","17"],"/home/ubuntu/fullstackopen/part2/src/ex/ex2_20.js",["18","19"],"import React, { useEffect, useState } from \"react\"\nimport service from \"./ex2_16_module\"\n\nconst Notification = ({ message, isError }) => {\n  if (message == null) {\n    return null\n  }\n  const notiStyle = {\n    color: isError == null ? \"green\" : \"red\",\n    background: \"lightgrey\",\n    fontSize: \"20px\",\n    borderStyle: \"solid\",\n    borderRadius: \"5px\",\n    padding: \"10px\",\n    marginBottom: \"10px\",\n  }\n  return <div style={notiStyle}>{message}</div>\n}\n\nconst Filter = ({ showWord, ShowWordHandler }) => {\n  return (\n    <div>\n      filter shown with\n      <input value={showWord} onChange={ShowWordHandler} />\n    </div>\n  )\n}\nconst PersonForm = ({\n  newName,\n  newPhone,\n  newNameHandler,\n  newPhoneHandler,\n  addPerson,\n}) => {\n  return (\n    <form>\n      <div>\n        name:\n        <input value={newName} onChange={newNameHandler} />\n      </div>\n      <div>\n        phone:\n        <input value={newPhone} onChange={newPhoneHandler} />\n      </div>\n      <div>\n        <button type='submit' onClick={addPerson}>\n          add\n        </button>\n      </div>\n    </form>\n  )\n}\nconst Persons = ({ personsToShow, deletePerson }) => {\n  return (\n    <>\n      {personsToShow.map((person) => (\n        <li key={person.id}>\n          {person.name} {person.number}\n          <button onClick={(e) => deletePerson(e, person.id)}>delete</button>\n        </li>\n      ))}\n    </>\n  )\n}\nconst App = () => {\n  const [persons, setPersons] = useState([])\n  const [newName, setNewName] = useState(\"\")\n  const [newPhone, setNewPhone] = useState(\"\")\n  const [showWord, setShowWord] = useState(\"\")\n  const [message, setMessage] = useState(\"\")\n  const [isError, setIsError] = useState(false)\n  const personsToShow =\n    showWord === \"\"\n      ? persons\n      : persons.filter((person) => person.name.includes(showWord))\n\n  const newNameHandler = (e) => {\n    setNewName(e.target.value)\n  }\n  const newPhoneHandler = (e) => {\n    setNewPhone(e.target.value)\n  }\n  const ShowWordHandler = (e) => {\n    setShowWord(e.target.value)\n  }\n  const addPerson = (e) => {\n    e.preventDefault()\n\n    if (persons.map((p) => p.name).includes(newName)) {\n      if (\n        window.confirm(\n          `${newName} is already added to phonebook, replace the old number with a new one?`\n        )\n      ) {\n        const newObject = {\n          name: newName,\n          number: newPhone,\n          id: persons.find((p) => p.name === newName).id,\n        }\n        service.update(newObject).then((res) => {\n          setPersons(\n            persons.map((p) => {\n              if (p.id !== res.id) {\n                return p\n              } else {\n                return res\n              }\n            })\n          )\n          setNewName(\"\")\n          setNewPhone(\"\")\n          setMessage(`Success update number about \"${newObject.name}\"`)\n          setIsError(false)\n        })\n      }\n    } else {\n      const newObject = {\n        name: newName,\n        number: newPhone,\n        id: persons.length + 1,\n      }\n      service\n        .create(newObject)\n        .then((res) => {\n          console.log(res)\n          setPersons(persons.concat(res))\n          setNewName(\"\")\n          setNewPhone(\"\")\n          setMessage(`Success create person \"${newObject.name}\"`)\n          setIsError(false)\n        })\n        .catch((err) => console.log(err.toString()))\n    }\n  }\n  const deletePerson = (e, id) => {\n    e.preventDefault()\n    if (window.confirm(\"Do you really want to delete \" + id + \"?\")) {\n      service\n        .deleteObject(id)\n        .then((res) => {\n          setPersons(persons.filter((p) => p.id != id))\n          setMessage(`Success delete person ${id}`)\n          setIsError(false)\n        })\n        .catch((err) => setMessage(err.toString() + \" \" + id))\n    }\n  }\n\n  useEffect(() => {\n    service.getAll().then((res) => {\n      setPersons(res)\n    })\n  }, [])\n\n  return (\n    <div>\n      <Notification message={message} />\n      <h2>Phonebook</h2>\n      <Filter showWord={showWord} ShowWordHandler={ShowWordHandler} />\n      <h2>add a new</h2>\n      <PersonForm\n        newName={newName}\n        newPhone={newPhone}\n        newNameHandler={newNameHandler}\n        newPhoneHandler={newPhoneHandler}\n        addPerson={addPerson}\n      />\n      <h2>Numbers</h2>\n      <Persons personsToShow={personsToShow} deletePerson={deletePerson} />\n    </div>\n  )\n}\n\nexport default App\n","/home/ubuntu/fullstackopen/part2/src/ex/ex2_16_module.js",["20"],{"ruleId":"21","replacedBy":"22"},{"ruleId":"23","replacedBy":"24"},{"ruleId":"25","severity":1,"message":"26","line":71,"column":10,"nodeType":"27","messageId":"28","endLine":71,"endColumn":17},{"ruleId":"29","severity":1,"message":"30","line":141,"column":49,"nodeType":"31","messageId":"32","endLine":141,"endColumn":51},{"ruleId":"33","severity":1,"message":"34","line":40,"column":1,"nodeType":"35","endLine":40,"endColumn":56},"no-native-reassign",["36"],"no-negated-in-lhs",["37"],"no-unused-vars","'isError' is assigned a value but never used.","Identifier","unusedVar","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","no-global-assign","no-unsafe-negation"]